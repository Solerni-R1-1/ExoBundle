<?php

/**
 * ExoOnLine
 * Copyright or © or Copr. Université Jean Monnet (France), 2012
 * dsi.dev@univ-st-etienne.fr
 *
 * This software is a computer program whose purpose is to [describe
 * functionalities and technical features of your software].
 *
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */

namespace UJM\ExoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UJM\ExoBundle\Entity\Exercise;
use Claroline\CoreBundle\Entity\User;

/**
 * PaperRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaperRepository extends EntityRepository
{
    /**
     * Returns a student's Paper which is not finished
     *
     */
    public function getPaper($userID, $exerciseID)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.user', 'u')
            ->join('p.exercise', 'e')
            ->where($qb->expr()->in('u.id', $userID))
            ->andWhere($qb->expr()->in('e.id', $exerciseID))
            ->andWhere('p.end IS NULL');

        return $qb->getQuery()->getResult();
    }

    /**
     * Returns the user's papers for an exercise
     *
     */
    public function getExerciseUserPapers($userID, $exerciseID, $orderBy = "paper_id", $orderDirection = "ASC", $getQuery = false)
    {

    	$dql = "SELECT u.firstName		AS user_firstname,
    					u.lastName		AS user_lastname,
    					u.id			AS user_id,
    					p 				AS paper,
    					p.id			AS paper_id,
    					p.start			AS paper_start,
    					p.end			AS paper_end
    			FROM UJM\ExoBundle\Entity\Paper p
    			JOIN p.exercise e
    				WITH e.id = :exerciseId
    			JOIN p.user u
    				WITH u.id = :userId
    			GROUP BY p.id
    			ORDER BY ".$orderBy." ".$orderDirection;
    	$query = $this->_em->createQuery($dql);
    	$query->setParameter("exerciseId", $exerciseID);
    	$query->setParameter("userId", $userID);
    	 
    	return $getQuery ? $query : $query->getResult();
    }

    /**
     * Returns all papers for an exercise
     *
     */
    public function getExerciseAllPapers(Exercise $exercise, $getQuery = false)
    {
    	$dql = "SELECT u.firstName		AS user_firstname,
    					u.lastName		AS user_lastname,
    					u.id			AS user_id,
    					p 				AS paper,
    					p.id			AS paper_id,
    					p.start			AS paper_start,
    					p.end			AS paper_end,
    					p.ordreQuestion AS paper_ordre_question
    			FROM UJM\ExoBundle\Entity\Paper p
    			JOIN p.exercise e
    				WITH e = :exercise
    			JOIN p.user u
    			GROUP BY p.id";
    	$query = $this->_em->createQuery($dql);
    	$query->setParameter("exercise", $exercise);
    	
    	return $getQuery ? $query : $query->getResult();
    }
    
    /**
     * Returns all papers for an exercise for CSV export
     *
     */
    public function getExerciseAllPapersIterator($exerciseID)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.exercise', 'e')
            ->join('p.user', 'u')
            ->where($qb->expr()->in('e.id', $exerciseID))
            ->orderBy('u.lastName', 'ASC')
            ->addOrderBy('u.firstName', 'ASC')
            ->addOrderBy('p.id', 'ASC');

        return $qb->getQuery()->iterate();
    }

    public function getPaperUser($userID)
    {
        $dql = 'SELECT p FROM UJM\ExoBundle\Entity\Paper p
                WHERE p.user = '.$userID.'
        ';

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
    
    public function getMaxNumPaper(Exercise $exercise, User $user) {
    	$dql = 'SELECT max(p.numPaper)
    			FROM UJM\ExoBundle\Entity\Paper p 
    			WHERE p.exercise = :exercise
    				AND p.user = :user';
    	
    	$query = $this->_em->createQuery($dql);
    	$query->setParameter('exercise', $exercise);
    	$query->setParameter('user', $user);
    	
    	return $query->getSingleScalarResult();
    }
    
    public function getMarksHistogram(Exercise $exercise) {
    	$dql = 'SELECT
    				count(DISTINCT p.id)	AS nbPapers,
    				p.mark					AS mark
    			FROM UJM\ExoBundle\Entity\Paper p
    			WHERE p.exercise = :exercise
    			GROUP BY mark';
    	
    	$query = $this->_em->createQuery($dql);
    	$query->setParameter('exercise', $exercise);
    	
    	return $query->getResult();
    }
    
    /**
     * WARNING : This method uses SQL directly to allow use of subqueries in FROM clause.
     */
    public function getInteractionsHistogram(Exercise $exercise) {
    	$stmt = $this->_em->getConnection()->prepare(
	    	'SELECT
			    interaction_id,
			    partial,
			    success,
			    noResponse,
			    wrong,
			    ROUND(((success * 100) / (success + wrong + partial)) * 2) / 2 AS difficulty
			FROM (
			    SELECT
			        interaction_id,
			        SUM(CASE WHEN score > 0 AND score < scoreMax THEN 1 ELSE 0 END) AS partial,
			        SUM(CASE WHEN score = scoreMax THEN 1 ELSE 0 END) AS success,
			        SUM(CASE WHEN score IS NULL THEN 1 ELSE 0 END) AS noResponse,
			        SUM(CASE WHEN score = 0 AND score IS NOT NULL THEN 1 ELSE 0 END) AS wrong
			    FROM (
			        SELECT
			            i.id AS interaction_id,
			            p.id AS paper_id,
			            (CASE WHEN r.response != "" THEN r.mark ELSE NULL END) AS score,
			            CASE WHEN iq.weight_response = 1 THEN SUM(c.right_response) ELSE iq.score_right_response END AS scoreMax
			        FROM ujm_paper AS p
			        JOIN ujm_paper_question AS pq
			            ON pq.paper_id = p.id
			        JOIN ujm_question AS q
			            ON q.id = pq.question_id
			        JOIN ujm_interaction AS i
			            ON i.question_id = q.id
			        JOIN ujm_interaction_qcm AS iq
			            ON iq.interaction_id = q.id
			        JOIN ujm_choice AS c
			            ON c.interaction_qcm_id = iq.id
			        LEFT JOIN ujm_response AS r
			            ON r.paper_id = p.id
			            AND r.interaction_id = i.id
			        WHERE p.exercise_id = '.$exercise->getId().'
			        GROUP BY r.id, p.id, iq.id
				) AS t1
				GROUP BY interaction_id
			) AS t2;');
    	$stmt->execute();
    	return $stmt->fetchAll();
    }
}