<?php

/**
 * ExoOnLine
 * Copyright or © or Copr. Université Jean Monnet (France), 2012
 * dsi.dev@univ-st-etienne.fr
 *
 * This software is a computer program whose purpose is to [describe
 * functionalities and technical features of your software].
 *
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */

namespace UJM\ExoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UJM\ExoBundle\Entity\Exercise;

/**
 * InteractionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InteractionRepository extends EntityRepository
{

    /**
     * Interactions by Question
     *
     */
    public function getInteraction($questionId)
    {
        $qb = $this->createQueryBuilder('i');

        $qb->join('i.question', 'q')
            ->where($qb->expr()->in('q.id', $questionId));

        return $qb->getQuery()->getResult();
    }

    /**
     * Interactions by teacher's Questions
     *
     */
    public function getUserInteraction($uid)
    {
        $qb = $this->createQueryBuilder('i');

        $qb->join('i.question', 'q')
            ->join('q.category', 'c')
            ->join('q.user', 'u')
            ->where($qb->expr()->in('u.id', $uid))
            ->orderBy('c.value', 'ASC')
            ->addOrderBy('q.title', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Interactions by Exercise's Questions
     *
     */
    public function getExerciseInteraction(Exercise $exercise, $shuffle, $nbQuestions = 0)
    {
    	$dql = "SELECT i
    			FROM UJM\ExoBundle\Entity\Interaction i
    			JOIN i.question q
    			JOIN UJM\ExoBundle\Entity\ExerciseQuestion eq
    				WITH eq.exercise = :exercise
    				AND eq.question = q
    			ORDER BY eq.ordre";
    	
    	$query = $this->_em->createQuery($dql);
    	$query->setParameter('exercise', $exercise);
    	$interactions = $query->getResult();
    	
    	if ($shuffle == 1) {
    		shuffle($interactions);
    	}
    	
    	if ($nbQuestions > 0) {
    		$i = 0;
    		$y = 0;
    		$orderedInteractions = array();
    		$nbQuestionsTot = count($interactions);
    		while ($i < $nbQuestions) {
    		    $y = rand(0, $nbQuestionsTot - 1);
    		    $orderedInteractions[] = $interactions[$y];
    		    unset($interactions[$y]);
    		    $nbQuestionsTot = count($interactions);
    		    $interactions = array_merge($interactions);
    			$i++;
    		}
    		$interactions = $orderedInteractions;
    	}
    	
    	return $interactions;
    }

    /**
     * Interactions for a paper
     *
     */
    public function getPaperInteraction($em, $ids)
    {
        /* $qb = $this->createQueryBuilder('i');

          $qb ->where($qb->expr()->in('i.id', $ids));

          return $qb->getQuery()->getResult(); */

        $interactions = array();

        $dql = 'SELECT i FROM UJM\ExoBundle\Entity\Interaction i '
            . 'WHERE i.id IN (\'' . $ids . '\') ';
        $query = $em->createQuery($dql);
        $interactions = $query->getResult();

        return $interactions;
    }

    /**
     * Interactions by Questions that an teatcher can import in an Exercise
     *
     */
    public function getUserInteractionImport($em, $uid, $exoId)
    {
        /*$dql = "
            SELECT i FROM UJM\ExoBundle\Entity\Interaction i
            JOIN i.question q JOIN q.category c '
            WHERE q.user='{$uid}'
            AND q NOT IN (
                SELECT que FROM UJM\ExoBundle\Entity\ExerciseQuestion eq
                JOIN eq.question que
                WHERE eq.exercise='{$exoId}'
            )
            ORDER BY c.value, q.title";

        return $em->createQuery($dql)->getResult();*/

        $questions = array();

        $dql = 'SELECT eq FROM UJM\ExoBundle\Entity\ExerciseQuestion eq WHERE eq.exercise=' . $exoId
            . ' ORDER BY eq.ordre';

        $query = $em->createQuery($dql);
        $eqs = $query->getResult();

        foreach ($eqs as $eq) {
            $questions[] = $eq->getQuestion()->getId();
        }

        $qb = $this->createQueryBuilder('i');

        $qb->join('i.question', 'q')
           ->join('q.category', 'c')
           ->join('q.user', 'u')
           ->where($qb->expr()->in('u.id', $uid));
        if (count($questions) > 0) {
             $qb->andWhere('q.id not in ('.implode(',', $questions).')');
        }
        $qb->orderBy('c.value', 'ASC')
           ->addOrderBy('q.title', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function findByType($userId, $whatToFind)
    {
        $dql = 'SELECT i FROM UJM\ExoBundle\Entity\Interaction i JOIN i.question q
            WHERE i.type LIKE :search
            AND q.user = '.$userId.'
        ';

        $query = $this->_em->createQuery($dql)
            ->setParameter('search', "%{$whatToFind}%");

        return $query->getResult();
    }

    public function findByContain($userId, $whatToFind)
    {
        $dql = 'SELECT i FROM UJM\ExoBundle\Entity\Interaction i JOIN i.question q
            WHERE i.invite LIKE :search
            AND q.user = '.$userId.'
        ';

        $query = $this->_em->createQuery($dql)
            ->setParameter('search', "%{$whatToFind}%");

        return $query->getResult();
    }

    public function findByAll($userId, $whatToFind)
    {
        $dql = 'SELECT i FROM UJM\ExoBundle\Entity\Interaction i JOIN i.question q JOIN q.category c
            WHERE (i.invite LIKE :search OR i.type LIKE :search OR c.value LIKE :search OR q.title LIKE :search)
            AND q.user = '.$userId.'
        ';

        $query = $this->_em->createQuery($dql)
            ->setParameter('search', "%{$whatToFind}%");

        return $query->getResult();
    }
}